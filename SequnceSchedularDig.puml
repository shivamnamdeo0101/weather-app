@startuml
title Weather Cache Scheduler — Internal Cache Refresh & Eviction Flow

participant "WeatherCacheScheduler\n(@Component inside weather-cache)" as scheduler
participant "GenericRedisService\n(Redis CRUD + Meta Ops)" as redis
participant "WeatherSvcClient\n(Calls Weather Service API)" as svc

== Scheduler Execution ==
scheduler -> redis: getAllKeys("weather:*:data")
redis --> scheduler: Return all cached city keys

loop For each cityKey in cache
    scheduler -> redis: getMeta(cityKey)
    redis --> scheduler: Return metadata (hits, lastAccess, lastRefresh)

    alt 🔥 HOT Cities (hits ≥ HOT_HIT_THRESHOLD)
        scheduler -> scheduler: Check if refresh due (now - lastRefresh ≥ HOT_REFRESH_INTERVAL)
        note right of scheduler
            HOT_HIT_THRESHOLD = 50
            HOT_REFRESH_INTERVAL = 10 minutes
        end note
        alt Refresh Required
            scheduler -> svc: fetchWeatherData(city)
            svc --> scheduler: Return latest weather data
            scheduler -> redis: saveWithMeta(cityKey, data, resetHits=true)
            scheduler -> scheduler: Log success (🔥 Hot refreshed)
        else Not Due Yet
            scheduler -> scheduler: Skip refresh
        end

    else 🌤 MEDIUM Cities (hits ≥ MEDIUM_HIT_THRESHOLD)
        scheduler -> scheduler: Check if refresh due (now - lastRefresh ≥ MEDIUM_REFRESH_INTERVAL)
        note right of scheduler
            MEDIUM_HIT_THRESHOLD = 10
            MEDIUM_REFRESH_INTERVAL = 20 minutes
        end note
        alt Refresh Required
            scheduler -> svc: fetchWeatherData(city)
            svc --> scheduler: Return latest weather data
            scheduler -> redis: saveWithMeta(cityKey, data, resetHits=true)
            scheduler -> scheduler: Log success (🌤 Medium refreshed)
        else Not Due Yet
            scheduler -> scheduler: Skip refresh
        end

    else ❄️ LOW / Inactive Cities (hits < MEDIUM_HIT_THRESHOLD)
        scheduler -> scheduler: Check if age > MAX_AGE (inactive > 1 hour)
        note right of scheduler
            MAX_AGE = 1 hour
        end note
        alt Inactive > 1h
            scheduler -> redis: deleteKey(cityKey)
            scheduler -> scheduler: Log removal (❄️ Evicted)
        else Recently Accessed
            scheduler -> scheduler: Retain entry
        end
    end
end

== Repeat Cycle ==
scheduler -> scheduler: Run again every 5 minutes (fixedRate)

== Strategy Summary ==
note right of scheduler
LFU1 → HOT Keys (frequent access, refreshed every 10 min)
LFU2 → MEDIUM Keys (moderate access, refreshed every 20 min)
LRU → LOW Keys (inactive > 1h, evicted)
TTL → All keys expire after 1 hour if no lastAccess update(As if user will request again within an hour
    it will update lastAccess and prevent eviction)
end note

@enduml
